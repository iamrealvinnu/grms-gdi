{"ast":null,"code":"var _jsxFileName = \"D:\\\\GDI Bot\\\\MyChatBotApp\\\\Frontend\\\\crm-chatbot-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport ChatbotUI from './ChatbotUI';\nimport Header from './Header';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const handleSendMessage = async () => {\n    if (input.trim() === \"\") return;\n    const userMessage = {\n      sender: \"user\",\n      text: input\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput(\"\");\n    try {\n      const response = await fetch(\"http://localhost:3000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setMessages(prevMessages => [...prevMessages, {\n          sender: \"bot\",\n          text: data.reply\n        }]);\n      } else {\n        console.error(\"Failed to send message\");\n      }\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatbotUI, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      onKeyPress: e => e.key === \"Enter\" && handleSendMessage(),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChatbotUI","Header","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","handleSendMessage","trim","userMessage","sender","text","prevMessages","response","fetch","method","headers","body","JSON","stringify","message","ok","data","json","reply","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/GDI Bot/MyChatBotApp/Frontend/crm-chatbot-frontend/src/App.js"],"sourcesContent":["// App.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport ChatbotUI from './ChatbotUI';\r\nimport Header from './Header';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    const handleSendMessage = async () => {\r\n        if (input.trim() === \"\") return;\r\n\r\n        const userMessage = { sender: \"user\", text: input };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        setInput(\"\");\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:3000/chat\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ message: input }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setMessages((prevMessages) => [...prevMessages, { sender: \"bot\", text: data.reply }]);\r\n            } else {\r\n                console.error(\"Failed to send message\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error sending message:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header />\r\n            <ChatbotUI messages={messages} />\r\n            <input\r\n                type=\"text\"\r\n                value={input}\r\n                onChange={(e) => setInput(e.target.value)}\r\n                onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage()}\r\n                placeholder=\"Type a message...\"\r\n            />\r\n            <button onClick={handleSendMessage}>Send</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMY,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAIF,KAAK,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAEzB,MAAMC,WAAW,GAAG;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEN;IAAM,CAAC;IACnDD,WAAW,CAAEQ,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,WAAW,CAAC,CAAC;IAC7DH,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;QACvDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAEf;QAAM,CAAC;MAC3C,CAAC,CAAC;MAEF,IAAIQ,QAAQ,CAACQ,EAAE,EAAE;QACb,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClCnB,WAAW,CAAEQ,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;UAAEF,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAEW,IAAI,CAACE;QAAM,CAAC,CAAC,CAAC;MACzF,CAAC,MAAM;QACHC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;MAC3C;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,oBACI1B,OAAA;IAAK2B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChB5B,OAAA,CAACF,MAAM;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVhC,OAAA,CAACH,SAAS;MAACM,QAAQ,EAAEA;IAAS;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjChC,OAAA;MACIiC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAE7B,KAAM;MACb8B,QAAQ,EAAGC,CAAC,IAAK9B,QAAQ,CAAC8B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,UAAU,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAIhC,iBAAiB,CAAC,CAAE;MAC5DiC,WAAW,EAAC;IAAmB;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFhC,OAAA;MAAQyC,OAAO,EAAElC,iBAAkB;MAAAqB,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEd;AAAC9B,EAAA,CA7CQD,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}